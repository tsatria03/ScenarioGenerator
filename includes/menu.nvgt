void mainmenu()
{
setupmenu();
m.add_item_tts("generate scenario", "gen");
m.add_item_tts("scenario editor", "edit");
m.add_item_tts("scenario statistics", "stats");
m.add_item_tts("exit", "ex");
int mres=m.run("Main menu. Please choose an option with your arrow keys, then press enter to activate one.",true);
string main=m.get_item_name(mres);
if(mres==0)
{
speak("exiting");
m.fade_music();
exit();
}
if(main=="gen")
{
m.fade_music();
setupmenu(false);
m.add_item_tts("male", "ml");
m.add_item_tts("female", "fl");
m.add_item_tts("back", "back");
int mres=m.run("Choose the gender you'd like to use for this generation.",true);
string gend=m.get_item_name(mres);
if(mres==0)
{
mainmenu();
}
if(gend=="ml")
{
speak("loading");
wait(500);
sengender="male";
health=10000;
maxhealth=10000;
genscen();
}
if(gend=="fl")
{
speak("loading");
wait(500);
sengender="female";
health=10000;
maxhealth=10000;
genscen();
}
if(gend=="back")
{
mainmenu();
}
}
if(main=="edit")
{
scencredmenu();
}
if(main=="stats")
{
statsmenu();
}
if(main=="ex")
{
speak("exiting");
m.fade_music();
exit();
}
}
void scencredmenu()
{
setupmenu();
m.add_item_tts("add scenarios", "ascen");
m.add_item_tts("remove scenarios", "rscen");
m.add_item_tts("view scenarios", "vscen");
m.add_item_tts("back", "back");
int mres=m.run("Scenario edotor menu",true);
string scm=m.get_item_name(mres);
if(mres==0)
{
mainmenu();
}
if(scm=="ascen")
{
adscenmenu();
}
if(scm=="rscen")
{
remscenmenu();
}
if(scm=="vscen")
{
vewscenmenu();
}
if(scm=="back")
{
mainmenu();
}
}
void adscenmenu()
{
setupmenu();
m.add_item_tts("add an action", "act");
m.add_item_tts("add an attack", "ak");
m.add_item_tts("add a body part", "bpart");
m.add_item_tts("add a character name", "cname");
m.add_item_tts("add a character type", "ctype");
m.add_item_tts("add a death message", "dmessage");
m.add_item_tts("add a mood", "mod");
m.add_item_tts("add a reason", "res");
m.add_item_tts("back", "back");
int mres=m.run("Add scenarios menu",true);
string ascm=m.get_item_name(mres);
if(mres==0)
{
scencredmenu();
}
if(ascm=="act")
{
m.fade_music();
actions.open("data/saves/actions.list", "a");
vd.set_disallowed_chars(disachars, false, disadesc);
string newact=vd.input_box("", "Enter the action you'd like to add.");
if(newact.empty())
{
alert("Error", "You must enter a valid action.");
adscenmenu();
}
else
{
actions.write("\r\n"+newact);
actions.close();
dlg("Success! Your action has been added to the list.");
adscenmenu();
}
}
if(ascm=="ak")
{
m.fade_music();
attacks.open("data/saves/attacks.list", "a");
vd.set_disallowed_chars(disachars, false, disadesc);
string newak=vd.input_box("", "Enter the attack you'd like to add.");
if(newak.empty())
{
alert("Error", "You must enter a valid attack.");
adscenmenu();
}
else
{
attacks.write("\r\n"+newak);
attacks.close();
dlg("Success! Your attack has been added to the list.");
adscenmenu();
}
}
if(ascm=="bpart")
{
m.fade_music();
bodyparts.open("data/saves/bodyparts.list", "a");
vd.set_disallowed_chars(disachars, false, disadesc);
string newbpart=vd.input_box("", "Enter the body part you'd like to add.");
if(newbpart.empty())
{
alert("Error", "You must enter a valid body part.");
adscenmenu();
}
else
{
bodyparts.write("\r\n"+newbpart);
bodyparts.close();
dlg("Success! Your body part has been added to the list.");
adscenmenu();
}
}
if(ascm=="cname")
{
m.fade_music();
charnames.open("data/saves/charnames.list", "a");
vd.set_disallowed_chars(disachars, false, disadesc);
string newcname=vd.input_box("", "Enter the character name you'd like to add.");
if(newcname.empty())
{
alert("Error", "You must enter a valid character name.");
adscenmenu();
}
else
{
charnames.write("\r\n"+newcname);
charnames.close();
dlg("Success! Your character name has been added to the list.");
adscenmenu();
}
}
if(ascm=="ctype")
{
m.fade_music();
chartypes.open("data/saves/chartypes.list", "a");
vd.set_disallowed_chars(disachars, false, disadesc);
string newctype=vd.input_box("", "Enter the character type you'd like to add.");
if(newctype.empty())
{
alert("Error", "You must enter a valid character type.");
adscenmenu();
}
else
{
chartypes.write("\r\n"+newctype);
chartypes.close();
dlg("Success! Your character type has been added to the list.");
adscenmenu();
}
}
if(ascm=="dmessage")
{
m.fade_music();
deaths.open("data/saves/deaths.list", "a");
vd.set_disallowed_chars(disachars, false, disadesc);
string newdmessage=vd.input_box("", "Enter the death message you'd like to add.");
if(newdmessage.empty())
{
alert("Error", "You must enter a valid death message.");
adscenmenu();
}
else
{
deaths.write("\r\n"+newdmessage);
deaths.close();
dlg("Success! Your death message has been added to the list.");
adscenmenu();
}
}
if(ascm=="mod")
{
m.fade_music();
moods.open("data/saves/moods.list", "a");
vd.set_disallowed_chars(disachars, false, disadesc);
string newmod=vd.input_box("", "Enter the mood you'd like to add.");
if(newmod.empty())
{
alert("Error", "You must enter a valid mood.");
adscenmenu();
}
else
{
moods.write("\r\n"+newmod);
moods.close();
dlg("Success! Your mood has been added to the list.");
adscenmenu();
}
}
if(ascm=="res")
{
m.fade_music();
reasons.open("data/saves/reasons.list", "a");
vd.set_disallowed_chars(disachars, false, disadesc);
string newres=vd.input_box("", "Enter the reason you'd like to add.");
if(newres.empty())
{
alert("Error", "You must enter a valid reason.");
adscenmenu();
}
else
{
reasons.write("\r\n"+newres);
reasons.close();
dlg("Success! Your reason has been added to the list.");
adscenmenu();
}
}
if(ascm=="back")
{
scencredmenu();
}
}
void remscenmenu()
{
setupmenu();
m.add_item_tts("remove an action", "act2");
m.add_item_tts("remove an attack", "ak2");
m.add_item_tts("remove a body part", "bpart2");
m.add_item_tts("remove a character name", "cname2");
m.add_item_tts("remove a character type", "ctype2");
m.add_item_tts("remove a death message", "dmessage2");
m.add_item_tts("remove a mood", "mod2");
m.add_item_tts("remove a reason", "res2");
m.add_item_tts("back", "back");
int mres=m.run("Remove scenarios menu",true);
string rscm=m.get_item_name(mres);
if(mres==0)
{
scencredmenu();
}
if(rscm=="act2")
{
m.fade_music();
    actions.open("data/saves/actions.list", "r");
    actionsplit = actions.read();
    string[] action = string_split(actionsplit, "\r\n", true);
    actions.close();
    setupmenu(false);
    for (uint i = 0; i < action.length(); i++)
    {
        m.add_item_tts(action[i], action[i], "", true);
    }
    int mres = m.run("Select an action to remove", true);
    if (mres == 0)
    {
        remscenmenu();
    }
    if (mres > 0 and mres <= action.length())
    {
        string act = action[mres - 1];
        int finder = action.find(act);
        if (finder > -1)
        {
            action.remove_at(finder);
            string final = "";
            for (uint i = 0; i < action.length(); i++)
            {
                final += action[i] + "\r\n";
            }
            actions.open("data/saves/actions.list", "w");
            actions.write(final);
            actions.close();
            dlg("Success! Your action has been removed.");
            remscenmenu();
        }
    }
}
if(rscm=="ak2")
{
m.fade_music();
attacks.open("data/saves/attacks.list", "r");
attacksplit = attacks.read();
string[] attack = string_split(attacksplit, "\r\n", true);
attacks.close();
setupmenu(false);
for (uint i = 0; i < attack.length(); i++)
{
    m.add_item_tts(attack[i], attack[i], "", true);
}
int mres = m.run("Select an attack to remove", true);
if (mres == 0)
{
    remscenmenu();
}
if (mres > 0 and mres <= attack.length())
{
    string atk = attack[mres - 1];
    int finder = attack.find(atk);
    if (finder > -1)
    {
        attack.remove_at(finder);
        string final = "";
        for (uint i = 0; i < attack.length(); i++)
        {
            final += attack[i] + "\r\n";
        }
        attacks.open("data/saves/attacks.list", "w");
        attacks.write(final);
        attacks.close();
        dlg("Success! Your attack has been removed.");
        remscenmenu();
    }
}
}
if(rscm=="bpart2")
{
m.fade_music();
bodyparts.open("data/saves/bodyparts.list", "r");
bodypartsplit = bodyparts.read();
string[] bodypart = string_split(bodypartsplit, "\r\n", true);
bodyparts.close();
setupmenu(false);
for (uint i = 0; i < bodypart.length(); i++)
{
    m.add_item_tts(bodypart[i], bodypart[i], "", true);
}
int mres = m.run("Select a body part to remove", true);
if (mres == 0)
{
    remscenmenu();
}
if (mres > 0 and mres <= bodypart.length())
{
    string bp = bodypart[mres - 1];
    int finder = bodypart.find(bp);
    if (finder > -1)
    {
        bodypart.remove_at(finder);
        string final = "";
        for (uint i = 0; i < bodypart.length(); i++)
        {
            final += bodypart[i] + "\r\n";
        }
        bodyparts.open("data/saves/bodyparts.list", "w");
        bodyparts.write(final);
        bodyparts.close();
        dlg("Success! Your body part has been removed.");
        remscenmenu();
    }
}
}
if(rscm=="cname2")
{
m.fade_music();
charnames.open("data/saves/charnames.list", "r");
charnamesplit = charnames.read();
string[] charname = string_split(charnamesplit, "\r\n", true);
charnames.close();
setupmenu(false);
for (uint i = 0; i < charname.length(); i++)
{
    m.add_item_tts(charname[i], charname[i], "", true);
}
int mres = m.run("Select a character name to remove", true);
if (mres == 0)
{
    remscenmenu();
}
if (mres > 0 and mres <= charname.length())
{
    string cn = charname[mres - 1];
    int finder = charname.find(cn);
    if (finder > -1)
    {
        charname.remove_at(finder);
        string final = "";
        for (uint i = 0; i < charname.length(); i++)
        {
            final += charname[i] + "\r\n";
        }
        charnames.open("data/saves/charnames.list", "w");
        charnames.write(final);
        charnames.close();
        dlg("Success! Your character name has been removed.");
        remscenmenu();
    }
}
}
if(rscm=="ctype2")
{
m.fade_music();
chartypes.open("data/saves/chartypes.list", "r");
chartypesplit = chartypes.read();
string[] chartype = string_split(chartypesplit, "\r\n", true);
chartypes.close();
setupmenu(false);
for (uint i = 0; i < chartype.length(); i++)
{
    m.add_item_tts(chartype[i], chartype[i], "", true);
}
int mres = m.run("Select a character type to remove", true);
if (mres == 0)
{
    remscenmenu();
}
if (mres > 0 and mres <= chartype.length())
{
    string ct = chartype[mres - 1];
    int finder = chartype.find(ct);
    if (finder > -1)
    {
        chartype.remove_at(finder);
        string final = "";
        for (uint i = 0; i < chartype.length(); i++)
        {
            final += chartype[i] + "\r\n";
        }
        chartypes.open("data/saves/chartypes.list", "w");
        chartypes.write(final);
        chartypes.close();
        dlg("Success! Your character type has been removed.");
        remscenmenu();
    }
}
}
if(rscm=="dmessage2")
{
m.fade_music();
deaths.open("data/saves/deaths.list", "r");
deathsplit = deaths.read();
string[] death = string_split(deathsplit, "\r\n", true);
deaths.close();
setupmenu(false);
for (uint i = 0; i < death.length(); i++)
{
    m.add_item_tts(death[i], death[i], "", true);
}
int mres = m.run("Select a death message to remove", true);
if (mres == 0)
{
    remscenmenu();
}
if (mres > 0 and mres <= death.length())
{
    string dm = death[mres - 1];
    int finder = death.find(dm);
    if (finder > -1)
    {
        death.remove_at(finder);
        string final = "";
        for (uint i = 0; i < death.length(); i++)
        {
            final += death[i] + "\r\n";
        }
        deaths.open("data/saves/deaths.list", "w");
        deaths.write(final);
        deaths.close();
        dlg("Success! Your death message has been removed.");
        remscenmenu();
    }
}
}
if(rscm=="mod2")
{
m.fade_music();
moods.open("data/saves/moods.list", "r");
moodsplit = moods.read();
string[] mood = string_split(moodsplit, "\r\n", true);
moods.close();
setupmenu(false);
for (uint i = 0; i < mood.length(); i++)
{
    m.add_item_tts(mood[i], mood[i], "", true);
}
int mres = m.run("Select a mood to remove", true);
if (mres == 0)
{
    remscenmenu();
}
if (mres > 0 and mres <= mood.length())
{
    string md = mood[mres - 1];
    int finder = mood.find(md);
    if (finder > -1)
    {
        mood.remove_at(finder);
        string final = "";
        for (uint i = 0; i < mood.length(); i++)
        {
            final += mood[i] + "\r\n";
        }
        moods.open("data/saves/moods.list", "w");
        moods.write(final);
        moods.close();
        dlg("Success! Your mood has been removed.");
        remscenmenu();
    }
}
}
if(rscm=="res2")
{
m.fade_music();
reasons.open("data/saves/reasons.list", "r");
reasonsplit = reasons.read();
string[] reason = string_split(reasonsplit, "\r\n", true);
reasons.close();
setupmenu(false);
for (uint i = 0; i < reason.length(); i++)
{
    m.add_item_tts(reason[i], reason[i], "", true);
}
int mres = m.run("Select a reason to remove", true);
if (mres == 0)
{
    remscenmenu();
}
if (mres > 0 and mres <= reason.length())
{
    string rs = reason[mres - 1];
    int finder = reason.find(rs);
    if (finder > -1)
    {
        reason.remove_at(finder);
        string final = "";
        for (uint i = 0; i < reason.length(); i++)
        {
            final += reason[i] + "\r\n";
        }
        reasons.open("data/saves/reasons.list", "w");
        reasons.write(final);
        reasons.close();
        dlg("Success! Your reason has been removed.");
        remscenmenu();
    }
}
}
if(rscm=="back")
{
scencredmenu();
}
}
void vewscenmenu()
{
setupmenu();
m.add_item_tts("view actions", "act3");
m.add_item_tts("view attacks", "ak3");
m.add_item_tts("view body parts", "bpart3");
m.add_item_tts("view character names", "cname3");
m.add_item_tts("view character types", "ctype3");
m.add_item_tts("view death messages", "dmessage3");
m.add_item_tts("view moods", "mod3");
m.add_item_tts("view reasons", "res3");
m.add_item_tts("back", "back");
int mres=m.run("View scenarios menu",true);
string vscm=m.get_item_name(mres);
if(mres==0)
{
scencredmenu();
}
if(vscm=="act3")
{
m.fade_music();
actions.open("data/saves/actions.list","r");
actionsplit=actions.read();
action=string_split(actionsplit,"\r\n",true);
setupmenu2();
for(uint i=0; i<action.length(); i++)
{
m.add_item_tts(action[i],"","",false);
}
int mres=m.run("Actions viewer", true);
if(mres==0)
{
vewscenmenu();
}
if (mres==0 and mres>=action.length())
{
return;
}
if (mres>0 and mres<=action.length())
{
return;
}
}
if(vscm=="ak3")
{
m.fade_music();
attacks.open("data/saves/attacks.list","r");
attacksplit=attacks.read();
attack=string_split(attacksplit,"\r\n",true);
setupmenu2();
for(uint i=0; i<attack.length(); i++)
{
m.add_item_tts(attack[i],"","",false);
}
int mres=m.run("Attacks viewer", true);
if(mres==0)
{
vewscenmenu();
}
if (mres==0 and mres>=attack.length())
{
return;
}
if (mres>0 and mres<=attack.length())
{
return;
}
}
if(vscm=="bpart3")
{
m.fade_music();
bodyparts.open("data/saves/bodyparts.list","r");
bodypartsplit=bodyparts.read();
bodypart=string_split(bodypartsplit,"\r\n",true);
setupmenu2();
for(uint i=0; i<bodypart.length(); i++)
{
m.add_item_tts(bodypart[i],"","",false);
}
int mres=m.run("Body parts viewer", true);
if(mres==0)
{
vewscenmenu();
}
if (mres==0 and mres>=bodypart.length())
{
return;
}
if (mres>0 and mres<=bodypart.length())
{
return;
}
}
if(vscm=="cname3")
{
m.fade_music();
charnames.open("data/saves/charnames.list","r");
charnamesplit=charnames.read();
charname=string_split(charnamesplit,"\r\n",true);
setupmenu2();
for(uint i=0; i<charname.length(); i++)
{
m.add_item_tts(charname[i],"","",false);
}
int mres=m.run("Character names viewer", true);
if(mres==0)
{
vewscenmenu();
}
if (mres==0 and mres>=charname.length())
{
return;
}
if (mres>0 and mres<=charname.length())
{
return;
}
}
if(vscm=="ctype3")
{
m.fade_music();
chartypes.open("data/saves/chartypes.list","r");
chartypesplit=chartypes.read();
chartype=string_split(chartypesplit,"\r\n",true);
setupmenu2();
for(uint i=0; i<chartype.length(); i++)
{
m.add_item_tts(chartype[i],"","",false);
}
int mres=m.run("Character types viewer", true);
if(mres==0)
{
vewscenmenu();
}
if (mres==0 and mres>=chartype.length())
{
return;
}
if (mres>0 and mres<=chartype.length())
{
return;
}
}
if(vscm=="dmessage3")
{
m.fade_music();
deaths.open("data/saves/deaths.list","r");
deathsplit=deaths.read();
death=string_split(deathsplit,"\r\n",true);
setupmenu2();
for(uint i=0; i<death.length(); i++)
{
m.add_item_tts(death[i],"","",false);
}
int mres=m.run("Death messages viewer", true);
if(mres==0)
{
vewscenmenu();
}
if (mres==0 and mres>=death.length())
{
return;
}
if (mres>0 and mres<=death.length())
{
return;
}
}
if(vscm=="mod3")
{
m.fade_music();
moods.open("data/saves/moods.list","r");
moodsplit=moods.read();
mood=string_split(moodsplit,"\r\n",true);
setupmenu2();
for(uint i=0; i<mood.length(); i++)
{
m.add_item_tts(mood[i],"","",false);
}
int mres=m.run("Moods viewer", true);
if(mres==0)
{
vewscenmenu();
}
if (mres==0 and mres>=mood.length())
{
return;
}
if (mres>0 and mres<=mood.length())
{
return;
}
}
if(vscm=="res3")
{
m.fade_music();
reasons.open("data/saves/reasons.list","r");
reasonsplit=reasons.read();
reason=string_split(reasonsplit,"\r\n",true);
setupmenu2();
for(uint i=0; i<reason.length(); i++)
{
m.add_item_tts(reason[i],"","",false);
}
int mres=m.run("Reasons viewer", true);
if(mres==0)
{
vewscenmenu();
}
if (mres==0 and mres>=reason.length())
{
return;
}
if (mres>0 and mres<=reason.length())
{
return;
}
}
if(vscm=="back")
{
scencredmenu();
}
}
void statsmenu()
{
getscen();
setupmenu();
m.add_item_tts("There are "+action.length()+"entries in the actions file.");
m.add_item_tts("There are "+attack.length()+"entries in the attacks file.");
m.add_item_tts("There are "+bodypart.length()+"entries in the body parts file.");
m.add_item_tts("There are "+charname.length()+"entries in the character names file.");
m.add_item_tts("There are "+chartype.length()+"entries in the character types file.");
m.add_item_tts("There are "+death.length()+"entries in the death messages file.");
m.add_item_tts("There are "+mood.length()+"entries in the moods file.");
m.add_item_tts("There are "+reason.length()+"entries in the reasons file.");
m.add_item_tts("back", "back");
int mres=m.run("scenario statistics menu",true);
string stm=m.get_item_name(mres);
if(mres==0 or mres>=m.get_item_name(mres))
{
mainmenu();
}
if(stm=="back")
{
mainmenu();
}
}
