#include"includes/includes.nvgt"
double ambvolume=-10, ambpan=0, ambpitch=100, musicvolume=-10, musicpan=0, musicpitch=100;
double health=10000, maxhealth=10000;
int ambslot, musicslot;
int dmg=0;
string[] action, attack, bodypart, charname, chartype, death, mood, pain, reason;
string actionsplit, attacksplit, bodypartsplit, charnamesplit, chartypesplit, deathsplit, moodsplit, painsplit, reasonsplit;
string randomaction, randomattack, randombodypart, randomcharname, randomchartype, randomdeath, randommood, randompain, randomreason;
string sentemp;
string disachars="@#$%^&*()[]{};:'\"\\|<>/+-=`~";
string disadesc="This character is not allowed.";
string sengender="male";
string senpack="default";
string version="1.6";
dynamic_menu_pro m;
file actions, bodyparts, attacks, deaths, charnames, chartypes, moods, pains, reasons, templates;
sound_pool pool, spool;
virtual_dialogs vd;
void main()
{
set_sound_storage("*");
set_sound_decryption_key("K71W8fVbUmfS4easd2OOlYannfQTMC9UFltsV7Ny1jDov0TJDE3NIC5aXD7U2SIiUaGnVciZD8WKWxMuA4OvrzFynqgfL2Yisq0hf1EOYwDCsPvajHtXE6IL1J0fcfkvwuTvrFcjsCQaCa3QhwZe1LC8duw8bST0CsNPzUP7w78zIfJicTBgKSmOi2F19aIo5czOKN3h7yTFXGuM7Q5lSM8JJYr7sSe2Em",true);
show_window("Scenario generator, "+"version "+version);
mainmenu();
}
void getscen() 
{
    actions.open("data/scenarios/" + senpack + "/actions.list", "r");
    actionsplit = actions.read();
    action = string_split(actionsplit, "\r\n", true);
    randomaction = random_string(action);
    attacks.open("data/scenarios/" + senpack + "/attacks.list", "r");
    attacksplit = attacks.read();
    attack = string_split(attacksplit, "\r\n", true);
    randomattack = random_string(attack);
    bodyparts.open("data/scenarios/" + senpack + "/bodyparts.list", "r");
    bodypartsplit = bodyparts.read();
    bodypart = string_split(bodypartsplit, "\r\n", true);
    randombodypart = random_string(bodypart);
    charnames.open("data/scenarios/" + senpack + "/charnames.list", "r");
    charnamesplit = charnames.read();
    charname = string_split(charnamesplit, "\r\n", true);
    randomcharname = random_string(charname);
    chartypes.open("data/scenarios/" + senpack + "/chartypes.list", "r");
    chartypesplit = chartypes.read();
    chartype = string_split(chartypesplit, "\r\n", true);
    randomchartype = random_string(chartype);
    moods.open("data/scenarios/" + senpack + "/moods.list", "r");
    moodsplit = moods.read();
    mood = string_split(moodsplit, "\r\n", true);
    randommood = random_string(mood);
    pains.open("data/scenarios/" + senpack + "/pains.list", "r");
    painsplit = pains.read();
    pain = string_split(painsplit, "\r\n", true);
    randompain = random_string(pain);
    reasons.open("data/scenarios/" + senpack + "/reasons.list", "r");
    reasonsplit = reasons.read();
    reason = string_split(reasonsplit, "\r\n", true);
    randomreason = random_string(reason);
    templates.open("data/scenarios/" + senpack + "/templates.list", "r");
    string contents = templates.read();
    templates.close();
    string[] lines = string_split(contents, "\r\n", true);
    string[] categories;
    for (uint i = 0; i < lines.length(); i++)
    {
        if (lines[i].starts_with("[") && lines[i].ends_with("]"))
        {
            string cat = lines[i].substr(1, lines[i].length() - 2);
            categories.insert_last(cat);
        }
    }
    if (categories.length() > 0)
    {
        sentemp = random_string(categories);
    }
    else
    {
        sentemp = "";
    }
}
void genscen()
{
ambslot=pool.play_stationary_extended("amb.ogg",true,0,ambpan,ambvolume,ambpitch,false);
musicslot=pool.play_stationary_extended("music"+random(1,2)+".ogg",true,0,musicpan,musicvolume,musicpitch,false);
speak("Press enter to generate a random scenario.");
while(true)
{
wait(5);
if(key_repeating(KEY_PRIOR) and musicvolume!=0)
{
musicvolume+=5;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
speak("track "+musicvolume);
}
if(key_repeating(KEY_NEXT) and musicvolume!=-50)
{
musicvolume-=5;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
speak("track "+musicvolume);
}
if(key_repeating(KEY_HOME) and ambvolume!=0)
{
ambvolume+=5;
pool.update_sound_start_values(ambslot,ambpan,ambvolume,ambpitch);
speak("source "+ambvolume);
}
if(key_repeating(KEY_END) and ambvolume!=-50)
{
ambvolume-=5;
pool.update_sound_start_values(ambslot,ambpan,ambvolume,ambpitch);
speak("source "+ambvolume);
}
if(key_repeating(KEY_H))
{
speak(round(health/maxhealth*100,0)+" percent health remaining");
}
if(key_pressed(KEY_RETURN))
{
getscen();
if (!sentemp.empty())
{
dmg = round(random(2, 20) / 100.0 * maxhealth, 0);
health-=dmg;
if(sengender=="male") pool.play_stationary_extended("male_scream.wav",false,0,0,-10,100,false);
else if(sengender=="female") pool.play_stationary_extended("female_scream.wav",false,0,0,-10,100,false);
pool.play_stationary_extended("pain"+random(1,4)+".ogg",false,0,0,-10,100,false);
    dlg(parse_scenario_template(sentemp));
}
else
{
pool.destroy_all();
pool.play_stationary_extended("bell.wav",false,0,0,-10,100,false);
alert("Error", "There are no template categories available to generate.");
sengender="none";
senpack="none";
health=10000;
maxhealth=10000;
mainmenu();
}
}
if(key_pressed(KEY_ESCAPE))
{
fade_volume_pool(pool);
sengender="none";
senpack="none";
health=10000;
maxhealth=10000;
mainmenu();
}
if(health<=0)
{
    deaths.open("data/scenarios/" + senpack + "/deaths.list", "r");
    deathsplit = deaths.read();
    death = string_split(deathsplit, "\r\n", true);
    randomdeath = random_string(death);
pool.destroy_all();
pool.play_stationary_extended("bell.wav",false,0,0,-10,100,false);
pool.play_stationary_extended("fall"+random(1,7)+".wav",false,0,0,-10,100,false);
pool.play_stationary_extended("death"+random(1,3)+".ogg",false,0,0,-10,100,false);
dlg(randomdeath+" Press enter to continue.");
sengender="none";
senpack="none";
health=10000;
maxhealth=10000;
mainmenu();
}
}
}
